! Ambient Weather 
! 
! from ambient_convert. Read edited indoor temp data, reverse date order, and
! write as .nc Convert .csv files with spikes due to unit sitting in the sun.
! Once these files have been verified, use SAVE/APPEND to incorporate them into
! the monthly csv files.  (Original files can be recovered via git)

! Input arguments: 
!   1    file name, e.g. ambient-weather-202007_indoor_temp, without the directory or .csv.
!   2    Month name for creating the output file name, e.g. June.
!   3    Year  for creating the output file name, e.g. 2021

! Example: 
!    go ambient_indoor_temp.jnl ambient-weather-202007_indoor_temp July 2020

cancdl data/all

define symbol infile = ($1).csv
define symbol month = ($2)
define symbol year = ($3)

IF ($month"0|Nov>1|*>0") THEN 
  message "When changing from Daylight to Standard time, the data repeats the hour from 1AM to 2AM.  Edit out this hour"
ENDIF

define symbol outfile = ($1).nc

define symbol monthyear ($month)($year)

! Change the value of 'rewrite' to 0 if the file has already been rewritten and we're starting after
! the edit of the dates_incr file.

! Date,Indoor Temperature (°F)
! Read the file - variables saved short names.  The variable
! will be reshaped to the time axis, and renamed at that time.

! File expected to be in the data/ directory

file/skip=1/type="text,num "\
/var="date,it_in"/form=delim data/($infile)

! Write date/time, Indoor Temp in increasing time order to a new csv file

say/clobber/outfile="data/($monthyear)_dates_incr.dat" "($month) ($year) Dates Increasing: Date, Indoor Temperature"

let nr = `date,return=isize`

cancel mode verify
say
say file ($1).csv
say Listing `nr` timesteps in increasing time order...
say

let ii = i[gx=date]
let irev = xreverse(ii)
let dater_in = sample_fast_i(date, irev)
let itr = xreverse(missing(it_in,999))

let date_o = substring(dater_in, 1, 10)
let time_o = substring(dater_in, 12, 8)

list/append/file="data/($monthyear)_dates_incr.dat"/form=(a10,a10,f8.2)/norow/nohead date_o,time_o,itr

!    this was needed if writing out dater as a single string including T between date and time,
!    and with the time zone.  Also writing as a string, with /form=coomma the string appears in quotes

IF `substring(date_o[i=1],6,2) eq "11"` THEN
 say
   say Edit the resulting file  data/($monthyear)_dates_incr.dat. Look for duplicate
   say times due to the end of daylight savings time. Edit those out.
   message hit return when done.
 say
ENDIF


! Read this file and define the time axis.


cancel data/all
file/delim=" "/skip=1/type="date,time,num"/var="date,time,it_in"/form=delim data/($monthyear)_dates_incr.dat

! Define the time axis from the dates 
! Save as a netCDF file.

define axis/t/t0=1-jan-1900/units=days taxis = date + time/24

set var/bad=999 it_in

let tt = t[gt=taxis]
let/units="Deg F"/title="Indoor Temp, edited to remove spikes" Indoor_Temperature = reshape(it_in, tt)

save/clobber/outtype=float/file="data/($outfile)" Indoor_Temperature

cancel var/all
cancel data/all
use data/($outfile)

set window/aspect=.5
cancel mode logo

plot/thick/color=blue Indoor_Temperature
pause
