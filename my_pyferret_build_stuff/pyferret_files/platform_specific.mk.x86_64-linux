#
# platform_specific.mk.x86_64-linux
#
# This file is included in Makefiles under the
# fer, fmt, and ppl directories and defines platform specific macros
#

# Leave blank to omit additional Linux linker flags that bind and hide internal
# functions.  Including these linker flags is mainly to hide statically-linked
# libcairo functions from systems that use an older version of libcairo (e.g., RHEL6).
	BIND_AND_HIDE_INTERNAL = True

# Extended regular expressions flag for sed (used with cleaning up run_tests results)
	SED_EXTREGEX_FLAG = -r

#
# Include directories
#
	NETCDF_INCLUDE	= -I$(NETCDF_LIBDIR)/../include

ifeq ($(strip $(HDF5_LIBDIR)),)
	HDF5_INCLUDE	=
else
	HDF5_INCLUDE	= -I$(HDF5_LIBDIR)/../include
endif

ifeq ($(strip $(CAIRO_LIBDIR)),)
	CAIRO_INCLUDE	= -I/usr/include/cairo
else
	CAIRO_INCLUDE	= -I$(CAIRO_LIBDIR)/../include -I$(CAIRO_LIBDIR)/../include/cairo
endif

ifeq ($(strip $(PIXMAN_LIBDIR)),)
	PIXMAN_INCLUDE	=
else
	PIXMAN_INCLUDE	= -I$(PIXMAN_LIBDIR)/../include
endif

ifeq ($(strip $(PANGO_LIBDIR)),)
	PANGO_INCLUDE	= -I/usr/include/pango-1.0  -I/home/ansman/miniconda3/envs/FERRET/include/harfbuzz
else
	PANGO_INCLUDE	= -I$(PANGO_LIBDIR)/../include/pango-1.0  -I$(PANGO_LIBDIR)/../include/harfbuzz
#	PANGO_INCLUDE	= -I$(PANGO_LIBDIR)/../include/pango-1.0
endif

ifeq ($(strip $(GLIB2_LIBDIR)),)
ifeq ($(shell /bin/ls -d /usr/lib64/glib-2.0/include 2>/dev/null),/usr/lib64/glib-2.0/include)
	GLIB2_INCLUDE	= -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include
else
	GLIB2_INCLUDE	= -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include
endif
else
	GLIB2_INCLUDE	= -I$(GLIB2_LIBDIR)/../include/glib-2.0 -I$(GLIB2_LIBDIR)/glib-2.0/include
endif


	MYINCLUDES	= -I$(PYTHONINCDIR) \
			  -I$(DIR_PREFIX)/fer/common \
			  -I$(DIR_PREFIX)/fer/grdel \
			  -I$(DIR_PREFIX)/fer/cferbind \
			  -I$(DIR_PREFIX)/fer/ccr \
			  -I$(DIR_PREFIX)/fmt/cmn \
			  -I$(DIR_PREFIX)/ppl/include \
			  -I$(DIR_PREFIX)/ppl/tmap_inc \
			  -I$(DIR_PREFIX)/pyfermod \
			  -I$(DIR_PREFIX)/external_functions/ef_utility \
			  $(NETCDF_INCLUDE) \
			  $(HDF5_INCLUDE) \
			  $(CAIRO_INCLUDE) \
			  $(PIXMAN_INCLUDE) \
			  $(PANGO_INCLUDE) \
			  $(GLIB2_INCLUDE)

	MYDEFINES	= -Dcrptd_cat_argument \
			  -Ddouble_p \
			  -Dgfortran \
			  -Dreclen_in_bytes \
			  -Dunix \
			  -Dxgks \
			  -DG77 \
			  -DG77_SIGNAL \
			  -DINTERNAL_READ_FORMAT_BUG \
			  -DMANDATORY_FORMAT_WIDTHS \
			  -DNEED_IAND \
			  -DNO_DOUBLE_ESCAPE_SLASH \
			  -DNO_OPEN_CARRIAGECONTROL \
			  -DNO_OPEN_READONLY \
			  -DNO_OPEN_RECORDTYPE \
			  -DNO_OPEN_SHARED \
			  -DNO_PASSED_CONCAT \
			  -DNO_PREPEND_STRING \
			  -DSTAR_1_SUPPORTED

	AR		= $(shell which ar)
	RANLIB		= $(shell which ranlib)

	ARFLAGS		= -cr

	CFLAGS		= -m64 -fPIC $(MYDEFINES) $(MYINCLUDES)

	FFLAGS		= -m64 -fPIC \
			  -fno-automatic \
			  -fno-second-underscore \
			  -fdollar-ok \
			  -ffixed-line-length-132 \
			  -ffpe-trap=overflow \
			  -fno-backslash \
			  -fimplicit-none \
			  -fdefault-real-8 \
			  -fdefault-double-8 \
			  $(MYDEFINES) $(MYINCLUDES)

	PPLUS_FFLAGS	= -m64 -fPIC \
			  -fno-automatic \
			  -fno-second-underscore \
			  -fdollar-ok \
			  -ffixed-line-length-132 \
			  -fno-backslash \
			  $(MYDEFINES) $(MYINCLUDES)

	OPT_FLAGS	= -O -DNDEBUG
	PPLUS_OPT_FLAGS	= -O0
	DBG_FLAGS	= -O0 -g
	PROF_FLAGS	= -O0 -g -pg

# Directly compile the .F source files to the .o object files
# since gfortran can handle the C compiler directives in Fortran code
%.o : %.F
	$(FC) $(FFLAGS) -c $*.F -o $*.o

#
# End of platform_specific.mk.x86_64-linux
#
